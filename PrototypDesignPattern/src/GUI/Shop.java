/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Prototype.Camera;
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatSolarizedDarkIJTheme;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luchn1k
 */
public class Shop extends javax.swing.JFrame {

    /**
     * Creates new form Shop
     */
    private final ArrayList<Camera> cameraList = new ArrayList();
    private Camera currentCameraObject;
    DefaultTableModel camTableModel;
    DecimalFormat df = new DecimalFormat("##.##");

    public Shop() {
        initComponents();
        camTableModel = (DefaultTableModel) camTable.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        brandTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        modelTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        typeTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        sensorTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        storageTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        imageSensorTxt = new javax.swing.JTextField();
        videoResTxt = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        storageTypeTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        isLcdChk = new javax.swing.JCheckBox();
        isFlashChk = new javax.swing.JCheckBox();
        videoResCombo = new javax.swing.JComboBox<>();
        StorageCapCombo = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        camTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mark Cameras");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DialogInput", 1, 18))); // NOI18N

        jLabel2.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel2.setText("Brand");

        brandTxt.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel3.setText("Model");

        modelTxt.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel4.setText("Type");

        typeTxt.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel5.setText("Sensor");

        sensorTxt.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        sensorTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sensorTxtKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sensorTxtKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel6.setText("Image Sensor");

        jLabel7.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel7.setText("Video Resolution");

        jLabel8.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel8.setText("Storage");

        storageTxt.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        storageTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                storageTxtKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                storageTxtKeyTyped(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel9.setText("Storage Type");

        imageSensorTxt.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        imageSensorTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                imageSensorTxtKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                imageSensorTxtKeyTyped(evt);
            }
        });

        videoResTxt.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        videoResTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                videoResTxtKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                videoResTxtKeyTyped(evt);
            }
        });

        saveBtn.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        storageTypeTxt.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel10.setText("Flash");

        jLabel11.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel11.setText("LCD");

        isLcdChk.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N

        isFlashChk.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N

        videoResCombo.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        videoResCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "K", "P" }));

        StorageCapCombo.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        StorageCapCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GB", "MB" }));

        jLabel12.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel12.setText("MP");

        jLabel13.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel13.setText("Inch");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(brandTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sensorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(typeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(videoResTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(imageSensorTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(videoResCombo, 0, 50, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(storageTypeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(storageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StorageCapCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(isFlashChk, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(isLcdChk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(storageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(imageSensorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)
                        .addComponent(StorageCapCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(typeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel7)
                                .addComponent(videoResTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9)
                                .addComponent(storageTypeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11)
                                .addComponent(videoResCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(sensorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(brandTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(modelTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(saveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(isFlashChk, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(isLcdChk, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("DialogInput", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Mark Cameras");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DialogInput", 1, 18))); // NOI18N

        camTable.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        camTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Brand", "Model", "Type", "Sensor", "Image Sensor", "Video Resolution", "Storage", "Flash", "LCD"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        camTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                camTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(camTable);
        if (camTable.getColumnModel().getColumnCount() > 0) {
            camTable.getColumnModel().getColumn(0).setResizable(false);
            camTable.getColumnModel().getColumn(1).setResizable(false);
            camTable.getColumnModel().getColumn(2).setResizable(false);
            camTable.getColumnModel().getColumn(3).setResizable(false);
            camTable.getColumnModel().getColumn(4).setResizable(false);
            camTable.getColumnModel().getColumn(5).setResizable(false);
            camTable.getColumnModel().getColumn(6).setResizable(false);
            camTable.getColumnModel().getColumn(7).setResizable(false);
            camTable.getColumnModel().getColumn(8).setResizable(false);
        }

        jButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton1.setText("Clone The Product");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1363, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        String brand = brandTxt.getText().trim();
        String model = modelTxt.getText().trim();
        String type = typeTxt.getText().trim();
        String sensor = sensorTxt.getText().trim();
        String imageSensor = imageSensorTxt.getText().trim();
        String videoRes = videoResTxt.getText().trim();
        String storage = storageTxt.getText().trim();
        String storageType = storageTypeTxt.getText().trim();
        boolean flash = isFlashChk.isSelected();
        boolean lcd = isLcdChk.isSelected();
        String videoResType = videoResCombo.getSelectedItem().toString();
        String storageTypeValue = StorageCapCombo.getSelectedItem().toString();

        if (brand.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/brand.png");
            JOptionPane.showMessageDialog(Shop.this, "Please enter a brand to register a new camera", "Error", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        if (model.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/model.png");
            JOptionPane.showMessageDialog(Shop.this, "Please enter a model of the camera to register a new camera", "Error", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        if (type.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/type.png");
            JOptionPane.showMessageDialog(Shop.this, "Please enter a camera type to register a new camera", "Error", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        if (sensor.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/sensor.png");
            JOptionPane.showMessageDialog(Shop.this, "Please enter a camera sensor to register a new camera", "Error", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        if (imageSensor.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/mp.png");
            JOptionPane.showMessageDialog(Shop.this, "Please enter a camera's image sensor to register a new camera", "Error", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        if (videoRes.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/res.png");
            JOptionPane.showMessageDialog(Shop.this, "Please enter a camera's resolution to register a new camera", "Error", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        if (storage.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/storage.png");
            JOptionPane.showMessageDialog(Shop.this, "Please enter a camera's storage capacity to register a new camera", "Error", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        if (storageType.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/storageType.png");
            JOptionPane.showMessageDialog(Shop.this, "Please enter a camera's storage type to register a new camera", "Error", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        double sensorValue = (Double.valueOf(sensor));
        double imageSensorValue = (Double.valueOf(imageSensor));
        double videoResValue = (Double.valueOf(videoRes));
        double storageValue = (Double.valueOf(storage));
        if (currentCameraObject == null) {
            currentCameraObject = new Camera(brand, model, type, sensorValue, imageSensorValue, videoResValue + " " + videoResType, storageValue + " " + storageTypeValue + " " + storageType, flash, lcd);
        } else {
            currentCameraObject.setBrand(brand);
            currentCameraObject.setModel(model);
            currentCameraObject.setType(type);
            currentCameraObject.setSensor(sensorValue);
            currentCameraObject.setImageSensor(imageSensorValue);
            currentCameraObject.setVideoResolution(videoResValue + " " + videoResType);
            currentCameraObject.setStorage(storageValue + " " + storageTypeValue + " " + storageType);
            currentCameraObject.setFlash(flash);
            currentCameraObject.setLCD(lcd);
        }
        cameraList.add(currentCameraObject);
        currentCameraObject = null;
        setTable();
        reset();
    }//GEN-LAST:event_saveBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (camTable.getSelectedColumnCount() == 1) {
            currentCameraObject = cameraList.get(camTable.getSelectedRow()).clone();
            brandTxt.setText(currentCameraObject.getBrand());
            modelTxt.setText(currentCameraObject.getModel());
            typeTxt.setText(currentCameraObject.getType());
            sensorTxt.setText(df.format(currentCameraObject.getSensor()));
            imageSensorTxt.setText(df.format(currentCameraObject.getImageSensor()));

            videoResTxt.setText(df.format(Double.valueOf(currentCameraObject.getVideoResolution().split(" ")[0])));
            videoResCombo.setSelectedItem(currentCameraObject.getVideoResolution().split(" ")[1].trim());

            String splitValue = currentCameraObject.getStorage().contains("GB") ? "GB" : "MB";
            storageTxt.setText(df.format(Double.valueOf(currentCameraObject.getStorage().split(splitValue)[0].trim())));
            storageTypeTxt.setText(currentCameraObject.getStorage().split(splitValue)[1].trim());
            StorageCapCombo.setSelectedItem(splitValue);

            isFlashChk.setSelected(currentCameraObject.isFlash());
            isLcdChk.setSelected(currentCameraObject.isLCD());

        } else {
            ImageIcon icon = new ImageIcon("src/images/multiple.png");
            JOptionPane.showMessageDialog(Shop.this, "Please select one item to clone", "Error", JOptionPane.INFORMATION_MESSAGE, icon);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        ImageIcon icon = new ImageIcon("src/Images/ico.png");
        setIconImage(icon.getImage());
    }//GEN-LAST:event_formWindowOpened

    private void sensorTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sensorTxtKeyTyped
        try {
            char c = evt.getKeyChar();
            String text = sensorTxt.getText().trim();

            boolean isValid = text.contains(".");
            if (!Character.isDigit(c) && !evt.isAltDown()) {
                if (c != '.') {
                    evt.consume();
                }
            }
            if ((c == '.' && isValid) || (text.length() == 0 && c == '.')) {
                evt.consume();
            }
            if (text.length() == 4) {
                evt.consume();
            }
            if (isValid) {
                if (BigDecimal.valueOf(Double.valueOf(text)).scale() == 2) {
                    evt.consume();
                }
            }
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_sensorTxtKeyTyped

    private void imageSensorTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_imageSensorTxtKeyTyped
        try {
            char c = evt.getKeyChar();
            String text = imageSensorTxt.getText().trim();

            boolean isValid = text.contains(".");
            if (!Character.isDigit(c) && !evt.isAltDown()) {
                if (c != '.') {
                    evt.consume();
                }
            }
            if ((c == '.' && isValid) || (text.length() == 0 && c == '.')) {
                evt.consume();
            }
            if (text.length() == 6) {
                evt.consume();
            }
            if (isValid) {
                if (BigDecimal.valueOf(Double.valueOf(text)).scale() == 2) {
                    evt.consume();
                }
            }
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_imageSensorTxtKeyTyped

    private void videoResTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_videoResTxtKeyTyped
        try {
            char c = evt.getKeyChar();
            String text = videoResTxt.getText().trim();

            boolean isValid = text.contains(".");
            if (!Character.isDigit(c) && !evt.isAltDown()) {
                if (c != '.') {
                    evt.consume();
                }
            }
            if ((c == '.' && isValid) || (text.length() == 0 && c == '.')) {
                evt.consume();
            }
            if (text.length() == 6) {
                evt.consume();
            }
            if (isValid) {
                if (BigDecimal.valueOf(Double.valueOf(text)).scale() == 2) {
                    evt.consume();
                }
            }
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_videoResTxtKeyTyped

    private void storageTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_storageTxtKeyTyped
        try {
            char c = evt.getKeyChar();
            String text = storageTxt.getText().trim();

            boolean isValid = text.contains(".");
            if (!Character.isDigit(c) && !evt.isAltDown()) {
                if (c != '.') {
                    evt.consume();
                }
            }
            if ((c == '.' && isValid) || (text.length() == 0 && c == '.')) {
                evt.consume();
            }
            if (text.length() == 6) {
                evt.consume();
            }
            if (isValid) {
                if (BigDecimal.valueOf(Double.valueOf(text)).scale() == 2) {
                    evt.consume();
                }
            }
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_storageTxtKeyTyped

    private void sensorTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sensorTxtKeyPressed
        if (evt.getKeyCode() == 86) {
            String temp = sensorTxt.getText().trim();
            int curser = sensorTxt.getCaretPosition();
            sensorTxt.setText("");
            try {
                String data = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
                StringBuilder validationValue = new StringBuilder(temp);
                validationValue.insert(curser, data);
                if (validationValue.length() > 4) {
                    sensorTxt.setText(temp);
                } else {
                    Double.parseDouble(validationValue.toString());
                    sensorTxt.setText(validationValue.toString());
                }
                evt.consume();
            } catch (NumberFormatException | UnsupportedFlavorException | IOException e) {
                sensorTxt.setText(temp);
                evt.consume();

            }
        }
    }//GEN-LAST:event_sensorTxtKeyPressed

    private void imageSensorTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_imageSensorTxtKeyPressed
        if (evt.getKeyCode() == 86) {
            String temp = imageSensorTxt.getText().trim();
            int curser = imageSensorTxt.getCaretPosition();
            imageSensorTxt.setText("");
            try {
                String data = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
                StringBuilder validationValue = new StringBuilder(temp);
                validationValue.insert(curser, data);
                if (validationValue.length() > 6) {
                    imageSensorTxt.setText(temp);
                } else {
                    Double.parseDouble(validationValue.toString());
                    imageSensorTxt.setText(validationValue.toString());
                }
                evt.consume();
            } catch (NumberFormatException | UnsupportedFlavorException | IOException e) {
                imageSensorTxt.setText(temp);
                evt.consume();

            }
        }
    }//GEN-LAST:event_imageSensorTxtKeyPressed

    private void videoResTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_videoResTxtKeyPressed
        if (evt.getKeyCode() == 86) {
            String temp = videoResTxt.getText().trim();
            int curser = videoResTxt.getCaretPosition();
            videoResTxt.setText("");
            try {
                String data = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
                StringBuilder validationValue = new StringBuilder(temp);
                validationValue.insert(curser, data);
                if (validationValue.length() > 6) {
                    videoResTxt.setText(temp);
                } else {
                    Double.parseDouble(validationValue.toString());
                    videoResTxt.setText(validationValue.toString());
                }
                evt.consume();
            } catch (NumberFormatException | UnsupportedFlavorException | IOException e) {
                videoResTxt.setText(temp);
                evt.consume();

            }
        }
    }//GEN-LAST:event_videoResTxtKeyPressed

    private void storageTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_storageTxtKeyPressed
        if (evt.getKeyCode() == 86) {
            String temp = storageTxt.getText().trim();
            int curser = storageTxt.getCaretPosition();
            storageTxt.setText("");
            try {
                String data = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
                StringBuilder validationValue = new StringBuilder(temp);
                validationValue.insert(curser, data);
                if (validationValue.length() > 6) {
                    storageTxt.setText(temp);
                } else {
                    Double.parseDouble(validationValue.toString());
                    storageTxt.setText(validationValue.toString());
                }
                evt.consume();
            } catch (NumberFormatException | UnsupportedFlavorException | IOException e) {
                storageTxt.setText(temp);
                evt.consume();

            }
        }
    }//GEN-LAST:event_storageTxtKeyPressed

    private void camTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_camTableMouseClicked

        if (camTable.getSelectedRowCount() == 1) {
            int selectedRow = camTable.getSelectedRow();
            Camera selectedCam = cameraList.get(selectedRow);
            ImageIcon icon = new ImageIcon("src/images/ico.png");
            JOptionPane.showMessageDialog(Shop.this, selectedCam.toString(), "Details", JOptionPane.INFORMATION_MESSAGE, icon);
        }


    }//GEN-LAST:event_camTableMouseClicked
    private void setTable() {
        camTableModel.setRowCount(0);

        for (Camera cam : cameraList) {
            String splitValue = cam.getStorage().contains("GB") ? "GB" : "MB";

            String[] data = {cam.getBrand(), cam.getModel(), cam.getType(),
                df.format(cam.getSensor()) + " inch",
                df.format(cam.getImageSensor()) + " MP",
                df.format(Double.valueOf(cam.getVideoResolution().split(" ")[0])) + " " + cam.getVideoResolution().split(" ")[1].trim(),
                df.format(Double.valueOf(cam.getStorage().split(splitValue)[0].trim())) + " " + splitValue + " " + cam.getStorage().split(splitValue)[1].trim(),
                cam.isFlash() ? "Available" : "Unavailable",
                cam.isLCD() ? "Available" : "Unavailable"};
            camTableModel.addRow(data);
        }
    }

    private void reset() {

        brandTxt.setText("");
        modelTxt.setText("");
        typeTxt.setText("");
        sensorTxt.setText("");
        imageSensorTxt.setText("");

        videoResTxt.setText("");
        videoResCombo.setSelectedIndex(0);

        storageTxt.setText("");
        storageTypeTxt.setText("");
        StorageCapCombo.setSelectedIndex(0);

        isFlashChk.setSelected(false);
        isLcdChk.setSelected(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Shop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Shop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Shop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Shop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FlatDarkLaf.setup();
                try {
                    UIManager.setLookAndFeel(new FlatSolarizedDarkIJTheme());
                } catch (UnsupportedLookAndFeelException ex) {
                }
                new Shop().setVisible(true);
            }
        }
        );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> StorageCapCombo;
    private javax.swing.JTextField brandTxt;
    private javax.swing.JTable camTable;
    private javax.swing.JTextField imageSensorTxt;
    private javax.swing.JCheckBox isFlashChk;
    private javax.swing.JCheckBox isLcdChk;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField modelTxt;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTextField sensorTxt;
    private javax.swing.JTextField storageTxt;
    private javax.swing.JTextField storageTypeTxt;
    private javax.swing.JTextField typeTxt;
    private javax.swing.JComboBox<String> videoResCombo;
    private javax.swing.JTextField videoResTxt;
    // End of variables declaration//GEN-END:variables
}
