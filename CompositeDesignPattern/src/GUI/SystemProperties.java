/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Composite.Directory;
import Composite.File;
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.intellijthemes.FlatCarbonIJTheme;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Luchn1k
 */
public class SystemProperties extends javax.swing.JFrame {

    /**
     * Creates new form SystemProperties
     */
    private final int CONVERT = 1024;
    private Directory parent;

    public SystemProperties() {
        initComponents();
        updateTree();
    }

    private void updateTree() {
        treeModel.setModel(null);
        DefaultTreeModel dtm = new DefaultTreeModel(parent);
        treeModel.setModel(dtm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        treeModel = new javax.swing.JTree();
        headder2 = new javax.swing.JLabel();
        headder1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        directoryNameTxt = new javax.swing.JTextField();
        directoryBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        fileNameTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fileSizeTxt = new javax.swing.JTextField();
        converterCombo = new javax.swing.JComboBox<>();
        createFile = new javax.swing.JButton();
        clearTreeBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("File Manager");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        treeModel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        treeModel.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treeModel.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treeModel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeModelMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(treeModel);

        headder2.setFont(new java.awt.Font("DialogInput", 1, 24)); // NOI18N
        headder2.setText("File View");

        headder1.setFont(new java.awt.Font("DialogInput", 1, 24)); // NOI18N
        headder1.setText("File Manager");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Create Directery", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DialogInput", 1, 14))); // NOI18N

        jLabel1.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel1.setText("Directery Name");

        directoryNameTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                directoryNameTxtKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                directoryNameTxtKeyTyped(evt);
            }
        });

        directoryBtn.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        directoryBtn.setText("Create");
        directoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(directoryNameTxt)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(directoryBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(directoryNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(directoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Create File", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DialogInput", 1, 14))); // NOI18N

        jLabel2.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel2.setText("File Name");

        fileNameTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileNameTxtKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fileNameTxtKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel3.setText("File Size");

        fileSizeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileSizeTxtKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fileSizeTxtKeyTyped(evt);
            }
        });

        converterCombo.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        converterCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MB", "GB" }));

        createFile.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        createFile.setText("Create");
        createFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(fileSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(converterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(fileNameTxt)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(converterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createFile, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        clearTreeBtn.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        clearTreeBtn.setText("Clear Tree");
        clearTreeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTreeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(clearTreeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(headder1)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headder2))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headder2)
                    .addComponent(headder1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearTreeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void treeModelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeModelMouseClicked
        if (evt.getClickCount() == 2) {
            Object lastSelectedPathComponent = treeModel.getLastSelectedPathComponent();
            if (lastSelectedPathComponent != null) {
                String s = "";
                ImageIcon icon = null;
                if (lastSelectedPathComponent.getClass().toString().contains("File")) {
                    icon = new ImageIcon("src/images/file.png");
                    File file = (File) lastSelectedPathComponent;

                    DecimalFormat df = new DecimalFormat("#.##");
                    String capacity = file.getSize() >= CONVERT ? df.format(file.getSize() / CONVERT) + " GB" : df.format(file.getSize()) + " MB";

                    s = "File Name: " + file.getName() + "\n" + "File Size: " + capacity;
                } else if (lastSelectedPathComponent.getClass().toString().contains("Directory")) {
                    icon = new ImageIcon("src/images/directory.png");
                    Directory directory = (Directory) lastSelectedPathComponent;

                    DecimalFormat df = new DecimalFormat("#.##");
                    String capacity = directory.getSize() >= CONVERT ? df.format(directory.getSize() / CONVERT) + " GB" : df.format(directory.getSize()) + " MB";

                    s = "Directory Name: " + directory.getName() + "\n" + "File Count: " + directory.getFileCount() + "\n" + "Directory Count: " + directory.getDirectoryCount() + "\n" + "Capacity: " + capacity;
                }
                JOptionPane.showMessageDialog(SystemProperties.this, s, "Info", JOptionPane.INFORMATION_MESSAGE, icon);
            }
        }
    }//GEN-LAST:event_treeModelMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        ImageIcon icon = new ImageIcon("src/images/system.png");
        setIconImage(icon.getImage());
    }//GEN-LAST:event_formWindowActivated

    private void directoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directoryBtnActionPerformed
        String name = directoryNameTxt.getText().trim();
        if (name.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/text.png");
            JOptionPane.showMessageDialog(SystemProperties.this, "Need a name to create a directory", "Warn", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        if (parent == null) {
            parent = new Directory(name);
            directoryNameTxt.requestFocus();
            updateTree();
            directoryNameTxt.setText("");
        } else {
            Object lastSelectedPathComponent = treeModel.getLastSelectedPathComponent();
            if (lastSelectedPathComponent != null) {
                if (lastSelectedPathComponent.getClass().toString().contains("Directory")) {
                    Directory SelectedParent = (Directory) lastSelectedPathComponent;
                    Directory directory = new Directory(name);
                    SelectedParent.addFile(directory);
                    directoryNameTxt.setText("");
                    directoryNameTxt.requestFocus();
                    updateTree();
                } else {
                    ImageIcon icon = new ImageIcon("src/images/invalid.png");
                    JOptionPane.showMessageDialog(SystemProperties.this, "Need a directory to add files/directory", "Error", JOptionPane.ERROR_MESSAGE, icon);
                }
            } else {
                ImageIcon icon = new ImageIcon("src/images/click.png");
                JOptionPane.showMessageDialog(SystemProperties.this, "Please select a directory to add", "Warn", JOptionPane.INFORMATION_MESSAGE, icon);
            }
        }
    }//GEN-LAST:event_directoryBtnActionPerformed

    private void createFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createFileActionPerformed
        String fileName = fileNameTxt.getText().trim();
        String fileSize = fileSizeTxt.getText().trim();
        String convMulti = converterCombo.getSelectedItem().toString().trim();
        if (fileName.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/text.png");
            JOptionPane.showMessageDialog(SystemProperties.this, "Need a name to create a file", "Warn", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        if (fileSize.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/storage.png");
            JOptionPane.showMessageDialog(SystemProperties.this, "Need a file size", "Warn", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        if (!fileName.contains(".")) {
            ImageIcon icon = new ImageIcon("src/images/extension.png");
            JOptionPane.showMessageDialog(SystemProperties.this, "Invalid file name. File need a extension", "Warn", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        if (fileName.charAt(fileName.length() - 1) == '.') {
            ImageIcon icon = new ImageIcon("src/images/extension.png");
            JOptionPane.showMessageDialog(SystemProperties.this, "Invalid file name. File need a extension", "Warn", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        Object lastSelectedPathComponent = treeModel.getLastSelectedPathComponent();
        if (parent == null || lastSelectedPathComponent == null || lastSelectedPathComponent.getClass().toString().contains("File")) {
            ImageIcon icon = new ImageIcon("src/images/storage.png");
            JOptionPane.showMessageDialog(SystemProperties.this, "Select a Directory ", "Warn", JOptionPane.INFORMATION_MESSAGE, icon);
            return;
        }
        double size = convMulti.equalsIgnoreCase("MB") ? Double.valueOf(fileSize) : Double.valueOf(fileSize) * CONVERT;
        Directory directory = (Directory) lastSelectedPathComponent;
        File file = new File(fileName, size);
        directory.addFile(file);
        fileNameTxt.setText("");
        fileSizeTxt.setText("");
        converterCombo.setSelectedIndex(0);
        fileNameTxt.requestFocus();
        updateTree();

    }//GEN-LAST:event_createFileActionPerformed

    private void fileSizeTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileSizeTxtKeyTyped
        try {
            char c = evt.getKeyChar();
            String text = fileSizeTxt.getText().trim();

            boolean isValid = text.contains(".");
            if (!Character.isDigit(c) && !evt.isAltDown()) {
                if (c != '.') {
                    evt.consume();
                }
            }
            if ((c == '.' && isValid) || (text.length() == 0 && c == '.')) {
                evt.consume();
            }
            if (text.length() == 15) {
                evt.consume();
            }
            if (isValid) {
                if (BigDecimal.valueOf(Double.valueOf(text)).scale() == 2) {
                    evt.consume();
                }
            }
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_fileSizeTxtKeyTyped

    private void fileNameTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileNameTxtKeyTyped
        if (fileNameTxt.getText().trim().length() == 255) {
            evt.consume();
        }
    }//GEN-LAST:event_fileNameTxtKeyTyped

    private void directoryNameTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_directoryNameTxtKeyTyped
        if (directoryNameTxt.getText().trim().length() == 255) {
            evt.consume();
        }
    }//GEN-LAST:event_directoryNameTxtKeyTyped

    private void fileSizeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileSizeTxtKeyPressed
        if (evt.getKeyCode() == 86) {
            String temp = fileSizeTxt.getText().trim();
            int curser = fileSizeTxt.getCaretPosition();
            fileSizeTxt.setText("");
            try {
                String data = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
                StringBuilder validationValue = new StringBuilder(temp);
                validationValue.insert(curser, data);
                if (validationValue.length() > 15) {
                    fileSizeTxt.setText(temp);
                } else {
                    Double.parseDouble(validationValue.toString());
                    fileSizeTxt.setText(validationValue.toString());
                }
                evt.consume();
            } catch (NumberFormatException | UnsupportedFlavorException | IOException e) {
                fileSizeTxt.setText(temp);
                evt.consume();

            }
        }
    }//GEN-LAST:event_fileSizeTxtKeyPressed

    private void directoryNameTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_directoryNameTxtKeyPressed
        if (evt.getKeyCode() == 86) {
            String temp = directoryNameTxt.getText().trim();
            int curser = directoryNameTxt.getCaretPosition();
            directoryNameTxt.setText("");
            try {
                String data = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
                StringBuilder validationValue = new StringBuilder(temp);
                validationValue.insert(curser, data);
                if (validationValue.length() > 255) {
                    directoryNameTxt.setText(temp);
                } else {
                    directoryNameTxt.setText(validationValue.toString());
                }
                evt.consume();
            } catch (UnsupportedFlavorException | IOException e) {
                directoryNameTxt.setText(temp);
                evt.consume();

            }
        }
    }//GEN-LAST:event_directoryNameTxtKeyPressed

    private void fileNameTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileNameTxtKeyPressed
        if (evt.getKeyCode() == 86) {
            String temp = fileNameTxt.getText().trim();
            int curser = fileNameTxt.getCaretPosition();
            fileNameTxt.setText("");
            try {
                String data = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
                StringBuilder validationValue = new StringBuilder(temp);
                validationValue.insert(curser, data);
                if (validationValue.length() > 255) {
                    fileNameTxt.setText(temp);
                } else {
                    fileNameTxt.setText(validationValue.toString());
                }
                evt.consume();
            } catch (UnsupportedFlavorException | IOException e) {
                fileNameTxt.setText(temp);
                evt.consume();

            }
        }
    }//GEN-LAST:event_fileNameTxtKeyPressed

    private void clearTreeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTreeBtnActionPerformed
        parent = null;
        updateTree();
    }//GEN-LAST:event_clearTreeBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SystemProperties.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SystemProperties.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SystemProperties.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SystemProperties.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FlatDarkLaf.setup();
                try {
                    UIManager.setLookAndFeel(new FlatCarbonIJTheme());
                } catch (UnsupportedLookAndFeelException ex) {
                    System.err.println("Failed to initialize LaF");
                }
                new SystemProperties().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearTreeBtn;
    private javax.swing.JComboBox<String> converterCombo;
    private javax.swing.JButton createFile;
    private javax.swing.JButton directoryBtn;
    private javax.swing.JTextField directoryNameTxt;
    private javax.swing.JTextField fileNameTxt;
    private javax.swing.JTextField fileSizeTxt;
    private javax.swing.JLabel headder1;
    private javax.swing.JLabel headder2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree treeModel;
    // End of variables declaration//GEN-END:variables
}
