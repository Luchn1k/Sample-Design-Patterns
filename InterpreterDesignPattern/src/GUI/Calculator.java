/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Interpreter.DevideOperator;
import Interpreter.Expression;
import Interpreter.MinusOperator;
import Interpreter.MultiplierOperator;
import Interpreter.Number;
import Interpreter.PlusOperator;
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.intellijthemes.FlatDarkPurpleIJTheme;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Luchn1k
 */
public class Calculator extends javax.swing.JFrame {

    /**
     * Creates new form Calculator
     */
    private final int MAX_COUNT = 40;
    private final ArrayList<String> operatorArray;

    public Calculator() {
        this.operatorArray = new ArrayList();
        initComponents();
        operatorArray.add(plusBtn.getText());
        operatorArray.add(minusBtn.getText());
        operatorArray.add(devideBtn.getText());
        operatorArray.add(multiplerBtn.getText());
        operatorArray.add("*");
        operatorArray.add("/");
   
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        calDisplay = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        eightBtn = new javax.swing.JButton();
        sevenBtn = new javax.swing.JButton();
        nineBtn = new javax.swing.JButton();
        minusBtn = new javax.swing.JButton();
        fourBtn = new javax.swing.JButton();
        fiveBtn = new javax.swing.JButton();
        sixBtn = new javax.swing.JButton();
        devideBtn = new javax.swing.JButton();
        oneBtn = new javax.swing.JButton();
        twoBtn = new javax.swing.JButton();
        threeBtn = new javax.swing.JButton();
        multiplerBtn = new javax.swing.JButton();
        dotBtn = new javax.swing.JButton();
        zeroBtn = new javax.swing.JButton();
        equalBtn = new javax.swing.JButton();
        plusBtn = new javax.swing.JButton();
        cBtn = new javax.swing.JButton();
        ceBtn = new javax.swing.JButton();
        openBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ebrima", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Calculator");

        calDisplay.setEditable(false);
        calDisplay.setColumns(20);
        calDisplay.setFont(new java.awt.Font("DialogInput", 1, 28)); // NOI18N
        calDisplay.setLineWrap(true);
        calDisplay.setRows(5);
        calDisplay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        calDisplay.setRequestFocusEnabled(false);

        eightBtn.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        eightBtn.setText("8");
        eightBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        eightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightBtnActionPerformed(evt);
            }
        });

        sevenBtn.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        sevenBtn.setText("7");
        sevenBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sevenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenBtnActionPerformed(evt);
            }
        });

        nineBtn.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        nineBtn.setText("9");
        nineBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        nineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineBtnActionPerformed(evt);
            }
        });

        minusBtn.setBackground(new java.awt.Color(204, 204, 204));
        minusBtn.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        minusBtn.setForeground(new java.awt.Color(0, 0, 0));
        minusBtn.setText("-");
        minusBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        minusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusBtnActionPerformed(evt);
            }
        });

        fourBtn.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        fourBtn.setText("4");
        fourBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        fourBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourBtnActionPerformed(evt);
            }
        });

        fiveBtn.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        fiveBtn.setText("5");
        fiveBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        fiveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveBtnActionPerformed(evt);
            }
        });

        sixBtn.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        sixBtn.setText("6");
        sixBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sixBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixBtnActionPerformed(evt);
            }
        });

        devideBtn.setBackground(new java.awt.Color(204, 204, 204));
        devideBtn.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        devideBtn.setForeground(new java.awt.Color(0, 0, 0));
        devideBtn.setText("รท");
        devideBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        devideBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devideBtnActionPerformed(evt);
            }
        });

        oneBtn.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        oneBtn.setText("1");
        oneBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        oneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneBtnActionPerformed(evt);
            }
        });

        twoBtn.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        twoBtn.setText("2");
        twoBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        twoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoBtnActionPerformed(evt);
            }
        });

        threeBtn.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        threeBtn.setText("3");
        threeBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        threeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeBtnActionPerformed(evt);
            }
        });

        multiplerBtn.setBackground(new java.awt.Color(204, 204, 204));
        multiplerBtn.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        multiplerBtn.setForeground(new java.awt.Color(0, 0, 0));
        multiplerBtn.setText("ร");
        multiplerBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        multiplerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplerBtnActionPerformed(evt);
            }
        });

        dotBtn.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        dotBtn.setText(".");
        dotBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dotBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dotBtnActionPerformed(evt);
            }
        });

        zeroBtn.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        zeroBtn.setText("0");
        zeroBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        zeroBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroBtnActionPerformed(evt);
            }
        });

        equalBtn.setBackground(new java.awt.Color(204, 204, 204));
        equalBtn.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        equalBtn.setForeground(new java.awt.Color(0, 0, 0));
        equalBtn.setText("=");
        equalBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        equalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalBtnActionPerformed(evt);
            }
        });

        plusBtn.setBackground(new java.awt.Color(204, 204, 204));
        plusBtn.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        plusBtn.setForeground(new java.awt.Color(0, 0, 0));
        plusBtn.setText("+");
        plusBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        plusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusBtnActionPerformed(evt);
            }
        });

        cBtn.setBackground(new java.awt.Color(255, 255, 102));
        cBtn.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        cBtn.setForeground(new java.awt.Color(0, 0, 0));
        cBtn.setText("C");
        cBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBtnActionPerformed(evt);
            }
        });

        ceBtn.setBackground(new java.awt.Color(255, 255, 102));
        ceBtn.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        ceBtn.setForeground(new java.awt.Color(0, 0, 0));
        ceBtn.setText("CE");
        ceBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ceBtnActionPerformed(evt);
            }
        });

        openBtn.setBackground(new java.awt.Color(204, 204, 204));
        openBtn.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        openBtn.setForeground(new java.awt.Color(0, 0, 0));
        openBtn.setText("(");
        openBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        openBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBtnActionPerformed(evt);
            }
        });

        closeBtn.setBackground(new java.awt.Color(204, 204, 204));
        closeBtn.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        closeBtn.setForeground(new java.awt.Color(0, 0, 0));
        closeBtn.setText(")");
        closeBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(fourBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(fiveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(sixBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(devideBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(oneBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(twoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(threeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(multiplerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(dotBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(zeroBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(equalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(plusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sevenBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(eightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nineBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(openBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(closeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(eightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sevenBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(nineBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(minusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fiveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fourBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sixBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(devideBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(twoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(oneBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(threeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(multiplerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(zeroBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dotBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(plusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(equalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(calDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addComponent(calDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    //upgdaes keylistner and copy paste
    private void nineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        String character = nineBtn.getText();
        temp += character;
        if (temp.length() <= MAX_COUNT) {
            calDisplay.setText(temp);
        }
    }//GEN-LAST:event_nineBtnActionPerformed

    private void sixBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        String character = sixBtn.getText();
        temp += character;
        if (temp.length() <= MAX_COUNT) {
            calDisplay.setText(temp);
        }
    }//GEN-LAST:event_sixBtnActionPerformed

    private void devideBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devideBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        if (temp.isEmpty()) {
            return;
        }
        if (String.valueOf(temp.toCharArray()[temp.length() - 1]).equals("โ")) {
            return;
        }
        if (isNotOperator(String.valueOf(temp.toCharArray()[temp.length() - 1]))) {
            String character = devideBtn.getText();
            //hidden character
            temp += "โ" + character + "โ";
            if (temp.length() <= MAX_COUNT) {
                calDisplay.setText(temp);
            }
        }
    }//GEN-LAST:event_devideBtnActionPerformed

    private void sevenBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        String character = sevenBtn.getText();
        temp += character;
        if (temp.length() <= MAX_COUNT) {
            calDisplay.setText(temp);
        }
    }//GEN-LAST:event_sevenBtnActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        ImageIcon icon = new ImageIcon("src/Images/ico.png");
        setIconImage(icon.getImage());
    }//GEN-LAST:event_formWindowOpened

    private void eightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        String character = eightBtn.getText();
        temp += character;
        if (temp.length() <= MAX_COUNT) {
            calDisplay.setText(temp);
        }
    }//GEN-LAST:event_eightBtnActionPerformed

    private void minusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        if (temp.isEmpty() || temp.equals("โ" + minusBtn.getText() + "โ")) {
            calDisplay.setText("โ" + minusBtn.getText() + "โ");
            return;
        }

        if (String.valueOf(temp.toCharArray()[temp.length() - 1]).equals("โ")) {
            return;
        }
        if (isNotOperator(String.valueOf(temp.toCharArray()[temp.length() - 1]))) {
            String character = minusBtn.getText();
            //hidden character
            temp += "โ" + character + "โ";
            if (temp.length() <= MAX_COUNT) {
                calDisplay.setText(temp);
            }
        }
    }//GEN-LAST:event_minusBtnActionPerformed

    private void fourBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        String character = fourBtn.getText();
        temp += character;
        if (temp.length() <= MAX_COUNT) {
            calDisplay.setText(temp);
        }
    }//GEN-LAST:event_fourBtnActionPerformed

    private void fiveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        String character = fiveBtn.getText();
        temp += character;
        if (temp.length() <= MAX_COUNT) {
            calDisplay.setText(temp);
        }
    }//GEN-LAST:event_fiveBtnActionPerformed

    private void oneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        String character = oneBtn.getText();
        temp += character;
        if (temp.length() <= MAX_COUNT) {
            calDisplay.setText(temp);
        }
    }//GEN-LAST:event_oneBtnActionPerformed

    private void twoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        String character = twoBtn.getText();
        temp += character;
        if (temp.length() <= MAX_COUNT) {
            calDisplay.setText(temp);
        }
    }//GEN-LAST:event_twoBtnActionPerformed

    private void threeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        String character = threeBtn.getText();
        temp += character;
        if (temp.length() <= MAX_COUNT) {
            calDisplay.setText(temp);
        }
    }//GEN-LAST:event_threeBtnActionPerformed

    private void multiplerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplerBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        if (temp.isEmpty()) {
            return;
        }
        if (String.valueOf(temp.toCharArray()[temp.length() - 1]).equals("โ")) {
            return;
        }
        if (isNotOperator(String.valueOf(temp.toCharArray()[temp.length() - 1]))) {
            String character = multiplerBtn.getText();
            //hidden character
            temp += "โ" + character + "โ";
            if (temp.length() <= MAX_COUNT) {
                calDisplay.setText(temp);
            }
        }
    }//GEN-LAST:event_multiplerBtnActionPerformed

    private void dotBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dotBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        if (!temp.contains(".") && temp.length() >= 1) {
            String character = dotBtn.getText();
            temp += character;
            if (temp.length() <= MAX_COUNT) {
                calDisplay.setText(temp);
            }
        }
    }//GEN-LAST:event_dotBtnActionPerformed

    private void zeroBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        if (!(temp.length() == 1 && temp.equals("0"))) {
            String character = zeroBtn.getText();
            temp += character;
            if (temp.length() <= MAX_COUNT) {
                calDisplay.setText(temp);
            }
        }
    }//GEN-LAST:event_zeroBtnActionPerformed

    private void plusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        if (temp.isEmpty() || temp.equals("โ" + plusBtn.getText() + "โ")) {
            calDisplay.setText("โ" + plusBtn.getText() + "โ");
            return;
        }
        if (String.valueOf(temp.toCharArray()[temp.length() - 1]).equals("โ")) {
            return;
        }
        if (isNotOperator(String.valueOf(temp.toCharArray()[temp.length() - 1]))) {
            String character = plusBtn.getText();
            //hidden character
            temp += "โ" + character + "โ";
            if (temp.length() <= MAX_COUNT) {
                calDisplay.setText(temp);
            }
        }
    }//GEN-LAST:event_plusBtnActionPerformed

    private void cBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBtnActionPerformed
        calDisplay.setText("");
    }//GEN-LAST:event_cBtnActionPerformed

    private void ceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ceBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        if (!calDisplay.getText().isEmpty()) {
            StringBuilder temp = new StringBuilder(calDisplay.getText());
            // hidden character
            if ("โ".equals(String.valueOf(temp.charAt(temp.length() - 1)))) {
                temp.delete(temp.length() - 3, temp.length() - 1);
                calDisplay.setText(temp.toString());
            }
            temp.deleteCharAt(temp.length() - 1);
            calDisplay.setText(temp.toString());

        }
    }//GEN-LAST:event_ceBtnActionPerformed

    private void openBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        String character = openBtn.getText();
        temp += character;
        if (temp.length() <= MAX_COUNT) {
            calDisplay.setText(temp);
        }
    }//GEN-LAST:event_openBtnActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String temp = calDisplay.getText();
        String character = closeBtn.getText();
        int openBracketCount = countChar(temp, "(");
        int closedBracketCount = countChar(temp, ")");

        if (openBracketCount > closedBracketCount) {
            temp += character;
            if (temp.length() <= MAX_COUNT) {
                calDisplay.setText(temp);
            }
        }
    }//GEN-LAST:event_closeBtnActionPerformed

    private void equalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalBtnActionPerformed
        if (calDisplay.getText().equalsIgnoreCase("MATH ERROR") || calDisplay.getText().equalsIgnoreCase("SYNTAX ERROR")) {
            calDisplay.setText("");
        }

        String data = calDisplay.getText();
        if (data.isEmpty()) {
            return;
        }
        int openBracketCount = countChar(data, "(");
        int closeBracketCount = countChar(data, ")");
        if (openBracketCount != closeBracketCount) {
            calDisplay.setText("SYNTAX ERROR");
            return;
        }

        if (data.contains("(")) {
            while (data.contains("(")) {
                String[] dataArray = data.split("");
                int startIndex = -1;
                int endIndex = -1;
                for (int i = 0; i < dataArray.length; i++) {
                    if (dataArray[i].equals("(")) {
                        startIndex = i;
                    }
                    if (dataArray[i].equals(")")) {
                        endIndex = i;
                        break;
                    }
                }

                String tempData = data.substring(startIndex + 1, endIndex);

                String caculate = caculate(tempData);
                if (caculate == null) {
                    calDisplay.setText("SYNTAX ERROR");
                    return;
                }
                if (caculate.equals("Infinity")) {
                    calDisplay.setText("MATH ERROR");
                    return;
                }
                StringBuilder stringBuilder = new StringBuilder(data);
                stringBuilder.replace(startIndex, endIndex + 1, caculate);
                data = stringBuilder.toString();
            }
        }
        String caculate = caculate(data);
        if (caculate == null) {
            calDisplay.setText("SYNTAX ERROR");
            return;
        }
        if (caculate.equals("Infinity")) {
            calDisplay.setText("MATH ERROR");
            return;
        }
        if (Double.valueOf(caculate) % 1 == 0) {
            DecimalFormat df = new DecimalFormat("#.##");
            caculate = df.format((Double.valueOf(caculate)));
        }
        calDisplay.setText(caculate);

    }//GEN-LAST:event_equalBtnActionPerformed

    private boolean isNotOperator(String character) {
        for (String s : operatorArray) {
            if (s.equalsIgnoreCase(character)) {
                return false;
            }
        }
        return true;
    }

    private String caculate(String data) {

        try {
            //hidden character "โ"
            String[] tempArray = data.split("โ");
            ArrayList<String> dataArrray = new ArrayList();
            dataArrray.addAll(Arrays.asList(tempArray));
            if (dataArrray.contains("")) {
                ArrayList<Integer> removeList = new ArrayList();
                for (int i = 0; i < dataArrray.size(); i++) {
                    if (dataArrray.get(i).isEmpty()) {
                        removeList.add(i + 1);
                        removeList.add(i);
                        dataArrray.set(i + 2, dataArrray.get(i + 1) + dataArrray.get(i + 2));
                    }
                }
                for (int i : removeList) {
                    dataArrray.remove(i);
                }
            }

            if (dataArrray.contains("*") || dataArrray.contains("/") || dataArrray.contains("ร") || dataArrray.contains("รท")) {
                for (int i = 0; i < dataArrray.size(); i++) {
                    if (dataArrray.get(i).equals("*") || dataArrray.get(i).equals("/") || dataArrray.get(i).equals("รท") || dataArrray.get(i).equals("ร")) {
                        String operator = dataArrray.get(i);
                        String nextValue = dataArrray.get(i + 1);
                        String previousValue = dataArrray.get(i - 1);
                        Expression expression = new Number(previousValue);
                        Expression expression2 = new Number(nextValue);
                        switch (operator) {
                            case "ร":
                                expression = new MultiplierOperator(expression, expression2);
                                break;
                            case "รท":
                                expression = new DevideOperator(expression, expression2);
                                break;
                            case "*":
                                expression = new MultiplierOperator(expression, expression2);
                                break;
                        }
                        double calculate = expression.interpret();
                        dataArrray.set(i, calculate + "");
                        dataArrray.remove(i - 1);
                        dataArrray.remove(i);
                    }
                }
            }
            Expression expression = new Number("0");
            for (int i = 0; i < dataArrray.size(); i++) {
                String s = dataArrray.get(i);
                switch (s) {
                    case "ร":
                        expression = new MultiplierOperator(expression, new Number(dataArrray.get(i + 1)));
                        i++;
                        break;
                    case "รท":
                        expression = new DevideOperator(expression, new Number(dataArrray.get(i + 1)));
                        i++;
                        break;
                    case "+":
                        expression = new PlusOperator(expression, new Number(dataArrray.get(i + 1)));
                        i++;
                        break;
                    case "-":
                        expression = new MinusOperator(expression, new Number(dataArrray.get(i + 1)));
                        i++;
                        break;
                    case "*":
                        expression = new MultiplierOperator(expression, new Number(dataArrray.get(i + 1)));
                        i++;
                        break;
                    default:
                        expression = new Number(s);
                        break;
                }
            }
            return String.valueOf(expression.interpret());
        } catch (Exception e) {
            return null;
        }
    }

    private int countChar(String str, String c) {
        int count = 0;
        for (int i = 0; i < str.length(); i++) {
            if (String.valueOf(str.charAt(i)).equalsIgnoreCase(c)) {
                count++;
            }
        }

        return count;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FlatDarkLaf.setup();
                try {
                    UIManager.setLookAndFeel(new FlatDarkPurpleIJTheme());
                } catch (UnsupportedLookAndFeelException ex) {
                    System.err.println("Failed to initialize LaF");
                }
                new Calculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cBtn;
    private javax.swing.JTextArea calDisplay;
    private javax.swing.JButton ceBtn;
    private javax.swing.JButton closeBtn;
    private javax.swing.JButton devideBtn;
    private javax.swing.JButton dotBtn;
    private javax.swing.JButton eightBtn;
    private javax.swing.JButton equalBtn;
    private javax.swing.JButton fiveBtn;
    private javax.swing.JButton fourBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton minusBtn;
    private javax.swing.JButton multiplerBtn;
    private javax.swing.JButton nineBtn;
    private javax.swing.JButton oneBtn;
    private javax.swing.JButton openBtn;
    private javax.swing.JButton plusBtn;
    private javax.swing.JButton sevenBtn;
    private javax.swing.JButton sixBtn;
    private javax.swing.JButton threeBtn;
    private javax.swing.JButton twoBtn;
    private javax.swing.JButton zeroBtn;
    // End of variables declaration//GEN-END:variables
}
