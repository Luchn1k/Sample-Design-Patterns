/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Visitor.CustomVisitor;
import Visitor.GameConsole;
import Visitor.Item;
import Visitor.ItemCountVisitor;
import Visitor.Laptop;
import Visitor.Mouse;
import Visitor.SmartWatch;
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.intellijthemes.FlatCobalt2IJTheme;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SpringLayout;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luchn1k
 */
public class Cart extends javax.swing.JFrame {

    /**
     * Creates new form Cart
     */
    private CardLayout cardlayout;
    private DefaultTableModel productTableModel;
    private File imageFile;
    private final ArrayList<Item> ITEM_LIST = new ArrayList();
    private Visitor.Cart cart;
    Visitor.CartVisitor cartTotal = new CustomVisitor();
    Visitor.CartVisitor itemCount = new ItemCountVisitor();

    public Cart() {
        initComponents();
        productTableModel = (DefaultTableModel) productTable.getModel();

        cardParent.add(addItem, "addItem");
        cardParent.add(viewItem, "viewItem");
        cardlayout = (CardLayout) (cardParent.getLayout());
        addButton.setEnabled(false);
        viewButton.setEnabled(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        cardParent = new javax.swing.JPanel();
        viewItem = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cartCountLbl = new javax.swing.JLabel();
        cartTotalLbl = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        productTypeChooserCombo = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        addItem = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        productImage = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ProductTypeCombo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        productBrandTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        productModelTxt = new javax.swing.JTextField();
        productValueOneLbl = new javax.swing.JLabel();
        productValueOneTxt = new javax.swing.JTextField();
        ProductValueTwoLbl = new javax.swing.JLabel();
        productValueTwoTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        productPrice = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        productDeliveryPrice = new javax.swing.JTextField();
        saveProductButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        productQuantity = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QuickBuy");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        addButton.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        addButton.setText("Add Itmes");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        viewButton.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                    .addComponent(viewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cardParent.setLayout(new java.awt.CardLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "My Account", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DialogInput", 1, 14))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/trolley.png"))); // NOI18N

        cartCountLbl.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        cartCountLbl.setForeground(new java.awt.Color(255, 102, 102));
        cartCountLbl.setText("0 Items In the Cart");

        cartTotalLbl.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        cartTotalLbl.setForeground(new java.awt.Color(255, 102, 102));
        cartTotalLbl.setText("Cart Total is Rs. 0");

        jButton2.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jButton2.setText("Check Out");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cartCountLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cartTotalLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(cartCountLbl))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cartTotalLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 4, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Products", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DialogInput", 1, 14))); // NOI18N

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Brand", "Model", "RAM", "Graphics", "Price", "Delivery", "Items", "Images"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);
        if (productTable.getColumnModel().getColumnCount() > 0) {
            productTable.getColumnModel().getColumn(0).setResizable(false);
            productTable.getColumnModel().getColumn(1).setResizable(false);
            productTable.getColumnModel().getColumn(2).setResizable(false);
            productTable.getColumnModel().getColumn(3).setResizable(false);
            productTable.getColumnModel().getColumn(4).setResizable(false);
            productTable.getColumnModel().getColumn(5).setResizable(false);
            productTable.getColumnModel().getColumn(6).setResizable(false);
            productTable.getColumnModel().getColumn(7).setResizable(false);
            productTable.getColumnModel().getColumn(8).setResizable(false);
        }

        jLabel2.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel2.setText("Select Product Type");

        productTypeChooserCombo.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        productTypeChooserCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Game Console", "Laptop", "Mouse", "Smart Watch" }));
        productTypeChooserCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productTypeChooserComboActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jButton1.setText("Add To Cart");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 958, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(69, 69, 69)
                                .addComponent(productTypeChooserCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(productTypeChooserCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout viewItemLayout = new javax.swing.GroupLayout(viewItem);
        viewItem.setLayout(viewItemLayout);
        viewItemLayout.setHorizontalGroup(
            viewItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewItemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        viewItemLayout.setVerticalGroup(
            viewItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewItemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        cardParent.add(viewItem, "card3");

        jLabel1.setFont(new java.awt.Font("Kristen ITC", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add New Product");

        productImage.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Click TO Select Product Image", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DialogInput", 1, 14))); // NOI18N
        productImage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        productImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productImageMouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel4.setText("Product Type");

        ProductTypeCombo.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        ProductTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Game Console", "Laptop", "Mouse", "Smart Watch" }));
        ProductTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductTypeComboActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel5.setText("Product Brand");

        productBrandTxt.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel6.setText("Prduct Model");

        productModelTxt.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N

        productValueOneLbl.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        productValueOneLbl.setText("RAM");

        productValueOneTxt.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N

        ProductValueTwoLbl.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        ProductValueTwoLbl.setText("Graphics");

        productValueTwoTxt.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel9.setText("Price");

        productPrice.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        productPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                productPriceKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                productPriceKeyTyped(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel10.setText("Delivary Price");

        productDeliveryPrice.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        productDeliveryPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                productDeliveryPriceKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                productDeliveryPriceKeyTyped(evt);
            }
        });

        saveProductButton.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        saveProductButton.setText("Register Item");
        saveProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProductButtonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel11.setText("Quantity");

        productQuantity.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        productQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                productQuantityKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                productQuantityKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout addItemLayout = new javax.swing.GroupLayout(addItem);
        addItem.setLayout(addItemLayout);
        addItemLayout.setHorizontalGroup(
            addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addItemLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 992, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addItemLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(saveProductButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(addItemLayout.createSequentialGroup()
                                .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6)
                                    .addComponent(productValueOneLbl)
                                    .addComponent(ProductValueTwoLbl)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))
                                .addGap(18, 18, 18)
                                .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(productQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                                    .addComponent(productPrice, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(productValueTwoTxt)
                                    .addComponent(productValueOneTxt)
                                    .addComponent(productModelTxt)
                                    .addComponent(productBrandTxt)
                                    .addComponent(ProductTypeCombo, 0, 219, Short.MAX_VALUE)
                                    .addComponent(productDeliveryPrice, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGap(31, 31, 31)
                        .addComponent(productImage, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        addItemLayout.setVerticalGroup(
            addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemLayout.createSequentialGroup()
                .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addItemLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(40, 40, 40)
                        .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(ProductTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(productBrandTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(productModelTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(productValueOneLbl)
                            .addComponent(productValueOneTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProductValueTwoLbl)
                            .addComponent(productValueTwoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(productPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(productDeliveryPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(productQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addItemLayout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(productImage, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addComponent(saveProductButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(178, Short.MAX_VALUE))
        );

        cardParent.add(addItem, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cardParent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cardParent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        cardlayout.show(cardParent, "addItem");
        addButton.setEnabled(false);
        viewButton.setEnabled(true);
    }//GEN-LAST:event_addButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed

        cardlayout.show(cardParent, "viewItem");
        addButton.setEnabled(true);
        viewButton.setEnabled(false);
        changeTableTitle(productTypeChooserCombo.getSelectedItem().toString().trim());
        addDataToTable(productTypeChooserCombo.getSelectedItem().toString().trim());
    }//GEN-LAST:event_viewButtonActionPerformed

    private void ProductTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductTypeComboActionPerformed
        String selectedItem = ProductTypeCombo.getSelectedItem().toString().trim();
        setCustomLabels(selectedItem);
    }//GEN-LAST:event_ProductTypeComboActionPerformed

    private void productImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productImageMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image files", "jpg", "png", "gif", "bmp"));
        fileChooser.setAcceptAllFileFilterUsed(false);

        int option = fileChooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (isImage(file)) {
                imageFile = file;
                try {
                    BufferedImage img = ImageIO.read(file);
                    Image dimg = img.getScaledInstance(productImage.getWidth(), productImage.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon imageIcon = new ImageIcon(dimg);
                    productImage.setIcon(imageIcon);
                } catch (IOException e) {
                    ImageIcon icon = new ImageIcon("src/images/picture.png");
                    JOptionPane.showMessageDialog(this, "Invalid Image", "Error", JOptionPane.ERROR_MESSAGE, icon);
                }
            } else {
                ImageIcon icon = new ImageIcon("src/images/picture.png");
                JOptionPane.showMessageDialog(this, "Invalid Image", "Error", JOptionPane.ERROR_MESSAGE, icon);
            }
        } else {

        }
    }//GEN-LAST:event_productImageMouseClicked

    private void saveProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProductButtonActionPerformed
        String productType = ProductTypeCombo.getSelectedItem().toString().trim();
        String productBrand = productBrandTxt.getText().trim();
        String productModel = productModelTxt.getText().trim();
        String discriptionOne = productValueOneTxt.getText().trim();
        String descriptionTwo = productValueTwoTxt.getText().trim();
        String price = productPrice.getText().trim();
        String deliveryPrice = productDeliveryPrice.getText().trim();
        String quantity = productQuantity.getText().trim();

        if (productType.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/type.png");
            JOptionPane.showMessageDialog(this, "Select the product type for register a new product", "Error", JOptionPane.ERROR_MESSAGE, icon);
            return;
        }
        if (productBrand.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/brand.png");
            JOptionPane.showMessageDialog(this, "Select the product brand for register a new product", "Error", JOptionPane.ERROR_MESSAGE, icon);
            return;
        }
        if (productModel.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/model.png");
            JOptionPane.showMessageDialog(this, "Select the product model for register a new product", "Error", JOptionPane.ERROR_MESSAGE, icon);
            return;
        }
        if (discriptionOne.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/description.png");
            JOptionPane.showMessageDialog(this, "Select the product description one for register a new product", "Error", JOptionPane.ERROR_MESSAGE, icon);
            return;
        }
        if (descriptionTwo.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/description.png");
            JOptionPane.showMessageDialog(this, "Select the product description two for register a new product", "Error", JOptionPane.ERROR_MESSAGE, icon);
            return;
        }
        if (price.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/price.png");
            JOptionPane.showMessageDialog(this, "Select the product price for register a new product", "Error", JOptionPane.ERROR_MESSAGE, icon);
            return;
        }
        if (deliveryPrice.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/price.png");
            JOptionPane.showMessageDialog(this, "Select the product delivery price for register a new product", "Error", JOptionPane.ERROR_MESSAGE, icon);
            return;
        }
        if (quantity.isEmpty()) {
            ImageIcon icon = new ImageIcon("src/images/qty.png");
            JOptionPane.showMessageDialog(this, "Select the product quantity for register a new product", "Error", JOptionPane.ERROR_MESSAGE, icon);
            return;
        }
        if (imageFile == null) {
            ImageIcon icon = new ImageIcon("src/images/image.png");
            JOptionPane.showMessageDialog(this, "Select the product image for register a new product", "Error", JOptionPane.ERROR_MESSAGE, icon);
            return;
        }
        String imagePath = imageFile.getAbsolutePath();
        Item item = null;
        switch (productType.toLowerCase()) {
            case "game console":
                item = new GameConsole(productBrand, productModel, discriptionOne, descriptionTwo, Double.valueOf(price), Double.valueOf(deliveryPrice), Integer.parseInt(quantity), imagePath);
                break;
            case "laptop":
                item = new Laptop(productBrand, productModel, discriptionOne, descriptionTwo, Double.valueOf(price), Double.valueOf(deliveryPrice), Integer.parseInt(quantity), imagePath);
                break;
            case "mouse":
                item = new Mouse(productBrand, productModel, discriptionOne, descriptionTwo, Double.valueOf(price), Double.valueOf(deliveryPrice), Integer.parseInt(quantity), imagePath);
                break;
            case "smart watch":
                item = new SmartWatch(productBrand, productModel, discriptionOne, descriptionTwo, Double.valueOf(price), Double.valueOf(deliveryPrice), Integer.parseInt(quantity), imagePath);
                break;
        }
        if (item != null) {
            ITEM_LIST.add(item);
        }
        resetAddItem();
    }//GEN-LAST:event_saveProductButtonActionPerformed

    private void productTypeChooserComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productTypeChooserComboActionPerformed
        changeTableTitle(productTypeChooserCombo.getSelectedItem().toString().trim());
        addDataToTable(productTypeChooserCombo.getSelectedItem().toString().trim());
    }//GEN-LAST:event_productTypeChooserComboActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (productTable.getSelectedColumnCount() == 1) {
            int index = Integer.parseInt(productTable.getValueAt(productTable.getSelectedRow(), 0).toString());
            if (cart == null) {
                cart = new Visitor.Cart();
            }

            switch (productTypeChooserCombo.getSelectedItem().toString().toLowerCase()) {
                case "game console":
                    if (((GameConsole) ITEM_LIST.get(index)).getQuantity() - 1 < 0) {
                        return;
                    }
                    ((GameConsole) ITEM_LIST.get(index)).setQuantity(((GameConsole) ITEM_LIST.get(index)).getQuantity() - 1);
                    ((GameConsole) ITEM_LIST.get(index)).setAddedCount(((GameConsole) ITEM_LIST.get(index)).getAddedCount() + 1);
                    break;
                case "laptop":
                    if (((Laptop) ITEM_LIST.get(index)).getQuantity() - 1 < 0) {
                        return;
                    }
                    ((Laptop) ITEM_LIST.get(index)).setQuantity(((Laptop) ITEM_LIST.get(index)).getQuantity() - 1);
                    ((Laptop) ITEM_LIST.get(index)).setAddedCount(((Laptop) ITEM_LIST.get(index)).getAddedCount() + 1);
                    break;
                case "mouse":
                    if (((Mouse) ITEM_LIST.get(index)).getQuantity() - 1 < 0) {
                        return;
                    }
                    ((Mouse) ITEM_LIST.get(index)).setQuantity(((Mouse) ITEM_LIST.get(index)).getQuantity() - 1);
                    ((Mouse) ITEM_LIST.get(index)).setAddedCount(((Mouse) ITEM_LIST.get(index)).getAddedCount() + 1);
                    break;
                case "smart watch":
                    if (((SmartWatch) ITEM_LIST.get(index)).getQuantity() - 1 < 0) {
                        return;
                    }
                    ((SmartWatch) ITEM_LIST.get(index)).setQuantity(((SmartWatch) ITEM_LIST.get(index)).getQuantity() - 1);
                    ((SmartWatch) ITEM_LIST.get(index)).setAddedCount(((SmartWatch) ITEM_LIST.get(index)).getAddedCount() + 1);
                    break;
            }
            if (!cart.getIsInCart(ITEM_LIST.get(index))) {
                cart.addToCart(ITEM_LIST.get(index));
            }
            cartCountLbl.setText(cart.getCartCount(itemCount) + " Items In the Cart");
            cartTotalLbl.setText("Cart Total is Rs. " + cart.calculateCartTotal(cartTotal));
            addDataToTable(productTypeChooserCombo.getSelectedItem().toString());
        } else {
            ImageIcon icon = new ImageIcon("src/images/trolley.png");
            JOptionPane.showMessageDialog(this, "Select an item to add to cart", "Info", JOptionPane.ERROR_MESSAGE, icon);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (cart != null) {
            ImageIcon icon = new ImageIcon("src/images/trolley.png");
            String[][] rows = cart.getDescription();
            String[] columns = {"Item", "Brand", "Model", "Detail One", "Detail Two", "Price", "Delivery Price", "Item Count"};

            JTable table = new JTable(rows, columns);
            table.setFont(new java.awt.Font("DialogInput", 1, 14));
            JScrollPane tableScroll = new JScrollPane(table);
            JLabel message = new JLabel();
            message.setText("Your total is: Rs. " + cart.calculateCartTotal(cartTotal) + " Do you want to continue");

            message.setFont(new java.awt.Font("DialogInput", 1, 20));
            JPanel customPanel = new JPanel(new GridLayout(2, 1));
            customPanel.add(tableScroll);
            customPanel.add(message);

            JScrollPane jScrollPane = new JScrollPane(customPanel);
            jScrollPane.setPreferredSize(viewItem.getSize());
            int confirmDialog = JOptionPane.showConfirmDialog(this, jScrollPane, "Complete", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, icon);
            if (confirmDialog == JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(this, "Thank You for your purches.\n Your Total is: Rs. " + cart.checkOut(cartTotal), "Thank You!", JOptionPane.ERROR_MESSAGE, icon);
                cart = null;
                cartCountLbl.setText("0 Items In the Cart");
                cartTotalLbl.setText("Cart Total is Rs. 0");
            }

        } else {
            ImageIcon icon = new ImageIcon("src/images/trolley.png");
            JOptionPane.showMessageDialog(this, "Your cart is currently empty", "Info", JOptionPane.ERROR_MESSAGE, icon);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void productPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productPriceKeyTyped
        try {
            char c = evt.getKeyChar();
            String text = productPrice.getText().trim();

            boolean isValid = text.contains(".");
            if (!Character.isDigit(c) && !evt.isAltDown()) {
                if (c != '.') {
                    evt.consume();
                }
            }
            if ((c == '.' && isValid) || (text.length() == 0 && c == '.')) {
                evt.consume();
            }
            if (text.length() == 15) {
                evt.consume();
            }
            if (isValid) {
                if (BigDecimal.valueOf(Double.valueOf(text)).scale() == 2) {
                    evt.consume();
                }
            }
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_productPriceKeyTyped

    private void productDeliveryPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productDeliveryPriceKeyTyped
        try {
            char c = evt.getKeyChar();
            String text = productDeliveryPrice.getText().trim();

            boolean isValid = text.contains(".");
            if (!Character.isDigit(c) && !evt.isAltDown()) {
                if (c != '.') {
                    evt.consume();
                }
            }
            if ((c == '.' && isValid) || (text.length() == 0 && c == '.')) {
                evt.consume();
            }
            if (text.length() == 15) {
                evt.consume();
            }
            if (isValid) {
                if (BigDecimal.valueOf(Double.valueOf(text)).scale() == 2) {
                    evt.consume();
                }
            }
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_productDeliveryPriceKeyTyped

    private void productQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productQuantityKeyTyped
        char c = evt.getKeyChar();
        String text = productQuantity.getText().trim();
        if (!Character.isDigit(c) && !evt.isAltDown()) {
            evt.consume();
        }


    }//GEN-LAST:event_productQuantityKeyTyped

    private void productPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productPriceKeyPressed

        if (evt.getKeyCode() == 86) {
            String temp = productPrice.getText().trim();
            int curser = productPrice.getCaretPosition();
            productPrice.setText("");
            try {
                String data = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
                StringBuilder validationValue = new StringBuilder(temp);
                validationValue.insert(curser, data);
                if (validationValue.length() > 15) {
                    productPrice.setText(temp);
                } else {
                    Double.parseDouble(validationValue.toString());
                    productPrice.setText(validationValue.toString());
                }
                evt.consume();
            } catch (NumberFormatException | UnsupportedFlavorException | IOException e) {
                productPrice.setText(temp);
                evt.consume();

            }
        }
    }//GEN-LAST:event_productPriceKeyPressed

    private void productDeliveryPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productDeliveryPriceKeyPressed
        if (evt.getKeyCode() == 86) {
            String temp = productDeliveryPrice.getText().trim();
            int curser = productDeliveryPrice.getCaretPosition();
            productDeliveryPrice.setText("");
            try {
                String data = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
                StringBuilder validationValue = new StringBuilder(temp);
                validationValue.insert(curser, data);
                if (validationValue.length() > 15) {
                    productDeliveryPrice.setText(temp);
                } else {
                    Double.parseDouble(validationValue.toString());
                    productDeliveryPrice.setText(validationValue.toString());
                }
                evt.consume();
            } catch (NumberFormatException | UnsupportedFlavorException | IOException e) {
                productDeliveryPrice.setText(temp);
                evt.consume();

            }
        }
    }//GEN-LAST:event_productDeliveryPriceKeyPressed

    private void productQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productQuantityKeyPressed

        if (evt.getKeyCode() == 86) {
            String temp = productQuantity.getText().trim();
            int curser = productQuantity.getCaretPosition();
            productQuantity.setText("");
            try {
                String data = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
                StringBuilder validationValue = new StringBuilder(temp);
                validationValue.insert(curser, data);
                if (validationValue.length() > 15) {
                    productQuantity.setText(temp);
                } else {
                    Integer.parseInt(validationValue.toString());
                    productQuantity.setText(validationValue.toString());
                }
                evt.consume();
            } catch (NumberFormatException | UnsupportedFlavorException | IOException e) {
                productQuantity.setText(temp);
                evt.consume();

            }
        }
    }//GEN-LAST:event_productQuantityKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        ImageIcon icon = new ImageIcon("src/images/icon.png");
        setIconImage(icon.getImage());
    }//GEN-LAST:event_formWindowOpened
    private boolean isImage(File file) {
        boolean valid = true;
        try {
            Image image = ImageIO.read(file);
            if (image == null) {
                valid = false;
            }
        } catch (IOException ex) {
            valid = false;
        }
        return valid;
    }

    private void setCustomLabels(String type) {
        switch (type.toLowerCase()) {
            case "game console":
                productValueOneLbl.setText("RAM");
                ProductValueTwoLbl.setText("Graphics");
                break;
            case "laptop":
                productValueOneLbl.setText("RAM");
                ProductValueTwoLbl.setText("Graphics");
                break;
            case "mouse":
                productValueOneLbl.setText("Type");
                ProductValueTwoLbl.setText("Buttons");
                break;
            case "smart watch":
                productValueOneLbl.setText("Style");
                ProductValueTwoLbl.setText("OS");
                break;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FlatDarkLaf.setup();
                try {
                    UIManager.setLookAndFeel(new FlatCobalt2IJTheme());
                } catch (UnsupportedLookAndFeelException ex) {
                    System.err.println("Failed to initialize LaF");
                }
                new Cart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ProductTypeCombo;
    private javax.swing.JLabel ProductValueTwoLbl;
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addItem;
    private javax.swing.JPanel cardParent;
    private javax.swing.JLabel cartCountLbl;
    private javax.swing.JLabel cartTotalLbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField productBrandTxt;
    private javax.swing.JTextField productDeliveryPrice;
    private javax.swing.JLabel productImage;
    private javax.swing.JTextField productModelTxt;
    private javax.swing.JTextField productPrice;
    private javax.swing.JTextField productQuantity;
    private javax.swing.JTable productTable;
    private javax.swing.JComboBox<String> productTypeChooserCombo;
    private javax.swing.JLabel productValueOneLbl;
    private javax.swing.JTextField productValueOneTxt;
    private javax.swing.JTextField productValueTwoTxt;
    private javax.swing.JButton saveProductButton;
    private javax.swing.JButton viewButton;
    private javax.swing.JPanel viewItem;
    // End of variables declaration//GEN-END:variables

    private void changeTableTitle(String type) {
        String[] colums = new String[9];
        switch (type.toLowerCase()) {
            case "game console":
                colums[0] = "ID";
                colums[1] = "Brand";
                colums[2] = "Model";
                colums[3] = "RAM";
                colums[4] = "Graphics";
                colums[5] = "Price";
                colums[6] = "Delivery";
                colums[7] = "Items";
                colums[8] = "Image";
                break;
            case "laptop":
                colums[0] = "ID";
                colums[1] = "Brand";
                colums[2] = "Model";
                colums[3] = "RAM";
                colums[4] = "Graphics";
                colums[5] = "Price";
                colums[6] = "Delivery";
                colums[7] = "Items";
                colums[8] = "Image";
                break;
            case "mouse":
                colums[0] = "ID";
                colums[1] = "Brand";
                colums[2] = "Model";
                colums[3] = "Type";
                colums[4] = "Buttos";
                colums[5] = "Price";
                colums[6] = "Delivery";
                colums[7] = "Items";
                colums[8] = "Image";
                break;
            case "smart watch":
                colums[0] = "ID";
                colums[1] = "Brand";
                colums[2] = "Model";
                colums[3] = "Style";
                colums[4] = "OS";
                colums[5] = "Price";
                colums[6] = "Delivery";
                colums[7] = "Items";
                colums[8] = "Image";
                break;
        }
        productTableModel.setColumnIdentifiers(colums);
    }

    private void resetAddItem() {
        ProductTypeCombo.setSelectedIndex(0);
        productBrandTxt.setText("");
        productModelTxt.setText("");
        productValueOneTxt.setText("");
        productValueTwoTxt.setText("");
        productPrice.setText("");
        productDeliveryPrice.setText("");
        productQuantity.setText("");
        imageFile = null;
        productImage.setIcon(null);

    }

    class ImageRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (value != null) {
                try {
                    BufferedImage img = ImageIO.read(new File((String) value));
                    Image dimg = img.getScaledInstance(productImage.getWidth(), productImage.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon imageIcon = new ImageIcon(dimg);
                    JLabel lbl = new JLabel(imageIcon);
                    return lbl;
                } catch (IOException e) {
                    return null;
                }
            } else {
                return null;
            }
        }
    }

    private void addDataToTable(String type) {
        productTableModel.setRowCount(0);
        type = type.replace(" ", "");
        for (Item item : ITEM_LIST) {
            String[] colums = new String[9];
            if (item.getClass().toString().toLowerCase().contains(type.toLowerCase())) {
                switch (type.toLowerCase()) {
                    case "gameconsole":
                        GameConsole gameConsole = (GameConsole) item;
                        colums[0] = ITEM_LIST.indexOf(item) + "";
                        colums[1] = gameConsole.getBrand();
                        colums[2] = gameConsole.getModel();
                        colums[3] = gameConsole.getRam();
                        colums[4] = gameConsole.getGrapics();
                        colums[5] = gameConsole.getPrice() + "";
                        colums[6] = gameConsole.getDelivery() + "";
                        colums[7] = gameConsole.getQuantity() + "";
                        colums[8] = gameConsole.getImagePath();
                        break;
                    case "laptop":
                        Laptop laptop = (Laptop) item;
                        colums[0] = ITEM_LIST.indexOf(item) + "";
                        colums[1] = laptop.getBrand();
                        colums[2] = laptop.getModel();
                        colums[3] = laptop.getRam();
                        colums[4] = laptop.getGrapics();
                        colums[5] = laptop.getPrice() + "";
                        colums[6] = laptop.getDelivery() + "";
                        colums[7] = laptop.getQuantity() + "";
                        colums[8] = laptop.getImagePath();
                        break;
                    case "mouse":
                        Mouse mouse = (Mouse) item;
                        colums[0] = ITEM_LIST.indexOf(item) + "";
                        colums[1] = mouse.getBrand();
                        colums[2] = mouse.getModel();
                        colums[3] = mouse.getType();
                        colums[4] = mouse.getButton();
                        colums[5] = mouse.getPrice() + "";
                        colums[6] = mouse.getDelivery() + "";
                        colums[7] = mouse.getQuantity() + "";
                        colums[8] = mouse.getImagePath();
                        break;
                    case "smartwatch":
                        SmartWatch smartWatch = (SmartWatch) item;
                        colums[0] = ITEM_LIST.indexOf(item) + "";
                        colums[1] = smartWatch.getBrand();
                        colums[2] = smartWatch.getModel();
                        colums[3] = smartWatch.getStyle();
                        colums[4] = smartWatch.getOs();
                        colums[5] = smartWatch.getPrice() + "";
                        colums[6] = smartWatch.getDelivery() + "";
                        colums[7] = smartWatch.getQuantity() + "";
                        colums[8] = smartWatch.getImagePath();
                        break;
                }

            }
            if (colums[0] != null) {
                productTableModel.addRow(colums);
            }
        }
        productTable.setRowHeight(128);
        productTable.getColumn("Image").setCellRenderer(new ImageRenderer());

    }
}
